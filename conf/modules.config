/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]


    withName: 'BCFTOOLS_VIEW' {
        ext.args   = "-f PASS"
        ext.prefix = { "${meta.id}.pass" }
        publishDir = [
        path: { "${params.outdir}/bcftools/pass" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BCFTOOLS_NORM' {
        ext.args   = "--output-type z -a --atom-overlaps ."
        ext.prefix = { "${meta.id}.normalized" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'BCFTOOLS_SPLITVEP' {
        // [%AF] pastes allele frequencies of all samples contained in a vcf without quotes
        // Normal sample AF: 0.01 Tumor sample AF: 0.019 is printed as 0.010.019
        ext.args   = "-f '%CHROM %POS %ID %REF %ALT [%AF] %IMPACT %Gene %SYMBOL %Consequence %SIFT %PolyPhen %HGVSc %HGVSp %RefSeq %Existing_variation %CLIN_SIG\n' --duplicate"
        ext.prefix = { "${meta.id}.split_vep" }
        publishDir = [
        path: { "${params.outdir}/bcftools/split_vep" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
    
    withName: QUERYNATOR_CGIAPI {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }

    withName: QUERYNATOR_CIVICAPI {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }

    withName: QUERYNATOR_CREATEREPORT {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }

}
